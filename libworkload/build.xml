<!--
     Copyright (C) 2007, 2008, 2009, 2012 Laurynas Biveinis

     This file is part of RR-Tree.

     RR-Tree is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     RR-Tree is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with RR-Tree.  If not, see <http://www.gnu.org/licenses/>.
-->
<project name="lib-workload" default="lib-workload.check">
    <dirname property="lib-workload.root" file="${ant.file.lib-workload}"/>

    <import file="../build-common.xml"/>
    <import file="../libs/xxl-1.1beta3/build.xml"/>

    <property name="lib-workload.src" location="${lib-workload.root}/src"/>
    <property name="lib-workload.dest" location="${out-production}/WorkloadLib"/>
    <property name="lib-workload.dest.cobertura" location="${out-production}/WorkloadLib/cobertura"/>
    <property name="lib-workload.test.src" location="${lib-workload.root}/tests"/>
    <property name="lib-workload.test.dest" location="${out-test}/WorkloadLib"/>
    <property name="lib-workload.coverage" location="${out-coverage}/WorkloadLib"/>

    <path id="lib-workload.compile.classpath">
        <pathelement location="${xxl-core.dest}"/>
    </path>

    <path id="lib-workload.test.compile.classpath">
        <path refid="lib-workload.compile.classpath"/>
        <pathelement location="${lib-workload.dest}"/>
        <pathelement location="${junit}"/>
    </path>

    <path id="lib-workload.test.run.classpath">
        <pathelement location="${lib-workload.dest.cobertura}"/>
        <path refid="lib-workload.test.compile.classpath"/>
        <pathelement location="${lib-workload.test.dest}"/>
        <path refid="cobertura.classpath"/>
    </path>

    <target name="lib-workload.init">
        <mkdir dir="${lib-workload.dest}"/>
        <mkdir dir="${lib-workload.dest.cobertura}"/>
    </target>

    <target name="lib-workload.test-init" depends="build-common.test-init">
        <mkdir dir="${lib-workload.test.dest}"/>
    </target>

    <target name="lib-workload.coverage-init" depends="build-common.coverage-init">
        <mkdir dir="${lib-workload.coverage}"/>
    </target>

    <target name="lib-workload.clean" description="Removes libworkload output files and directories">
        <delete dir="${lib-workload.coverage}"/>
        <delete dir="${lib-workload.dest}"/>
        <delete dir="${lib-workload.dest.cobertura}"/>
        <delete dir="${lib-workload.test.dest}"/>
    </target>

    <target name="lib-workload.make" depends="lib-workload.init,xxl-core.make" description="Makes libworkload">
        <javac srcdir="${lib-workload.src}" destdir="${lib-workload.dest}"
               classpathref="lib-workload.compile.classpath"/>
        <cobertura-instrument todir="${lib-workload.dest.cobertura}" datafile="${cobertura.data}">
            <fileset dir="${lib-workload.dest}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="lib-workload.test-make" depends="lib-workload.make,lib-workload.test-init">
        <javac srcdir="${lib-workload.test.src}" destdir="${lib-workload.test.dest}"
               classpathref="lib-workload.test.compile.classpath"/>
    </target>

    <target name="lib-workload.check" depends="lib-workload.test-make" description="Runs tests for libworkload">
        <junit haltonfailure="yes" fork="yes" printsummary="true">
            <assertions>
                <enable/>
            </assertions>
            <classpath refid="lib-workload.test.run.classpath"/>
            <formatter type="brief" usefile="no"/>
            <batchtest todir="${out-test}">
                <fileset dir="${lib-workload.test.src}">
                    <include name="**/AllTests.java"/>
                </fileset>
            </batchtest>
            <jvmarg value="-XX:-UseSplitVerifier"/>
        </junit>
    </target>

    <target name="lib-workload.coverage" depends="build-common.coverage-init,lib-workload.check"
            description="Runs tests for libworkload and produces coverage report">
        <cobertura-report destdir="${lib-workload.coverage}" datafile="${cobertura.data}">
            <fileset dir="${lib-workload.src}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>

</project>
