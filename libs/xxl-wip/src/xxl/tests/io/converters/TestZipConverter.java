package xxl.tests.io.converters;

import java.io.IOException;

import xxl.core.io.converters.Converter;
import xxl.core.io.converters.StringConverter;
import xxl.core.io.converters.ZipConverter;

/**
 * Some examples to demonstrate the functionality and the usage
 * of the class ZipConverter.
 */
public class TestZipConverter {

	/**
	 * The main method contains some examples how to use a zip converter. It
	 * can also be used to test the functionality of a zip converter.
	 *
	 * @param args array of <code>String</code> arguments. It can be used to
	 *        submit a String to compress/decompress.
	 * @throws IOException includes any I/O exceptions that may occur.
	 */
	public static void main(String[] args) throws IOException {

		//////////////////////////////////////////////////////////////////
		//                      Usage example (1).                      //
		//////////////////////////////////////////////////////////////////

		// create a string to be converted and zipped
		String s;
		if (args.length == 0) {
			s =	"This is a really long message text for test purposes."+
				"For shorter strings than 100 characters, this compression "+
	 			"does not make much sense because the zip-header ist too long. ";
	 		// make the string longer
	 		s = s+s+s;
	 	}
	 	else
	 		s = args[0];
 		// create a new byte array output stream
		java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();
		// write the string to the output stream
		StringConverter.DEFAULT_INSTANCE.write(new java.io.DataOutputStream(output), s);
		// get the data generated by the output stream
		byte[] buf = output.toByteArray();
		// close the output stream
		output.close();
		// write out the uncompressed length
		System.out.println("Uncompressed length: " + buf.length);
		// create a zip converter for strings
		Converter<String> converter = new ZipConverter<String>(StringConverter.DEFAULT_INSTANCE);
		// create a new byte array output stream
		output = new java.io.ByteArrayOutputStream();
		// write the string to the output stream
		converter.write(new java.io.DataOutputStream(output), s);
		// get the zipped data generated by the output stream
		buf = output.toByteArray();
		// close the output stream
		output.close();
		// write out the compressed length
		System.out.println("Compressed length: " + buf.length);
		// create a new byte array input buffer based on the stored zipped data
		java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(buf);
		// read a string from the input stream
		String s2 = converter.read(new java.io.DataInputStream(input), null);
		// close the input stream
		input.close();
		// write out the uncompressed text
		System.out.println("The decompressed text: " + s2);
		// compare the original and the uncompressed text
		if (!s.equals(s2))
			throw new RuntimeException("The original and the compressed/decompressed strings are not equal.");
	}

}
