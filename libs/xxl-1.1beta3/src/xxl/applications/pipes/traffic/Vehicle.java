/* XXL: The eXtensible and fleXible Library for data processing

Copyright (C) 2000-2006 Prof. Dr. Bernhard Seeger
                        Head of the Database Research Group
                        Department of Mathematics and Computer Science
                        University of Marburg
                        Germany

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307,
USA

	http://www.xxl-library.de

bugs, requests for enhancements: request@xxl-library.de

If you want to be informed on new versions of XXL you can 
subscribe to our mailing-list. Send an email to 
	
	xxl-request@lists.uni-marburg.de

without subject and the word "subscribe" in the message body. 
*/

package xxl.applications.pipes.traffic;

import java.util.Date;

import xxl.core.functions.Function;
import xxl.core.pipes.elements.TemporalObject;
import xxl.core.pipes.elements.TimeInterval;

/**
 * An instance of this class contains information about one tuple generated by a highway sensor
 * (http://www.clearingstelle-verkehr.de/cs/verkehrsdaten/katalog/katalogberichte/fsp/fsp_metadaten). 
 */
public class Vehicle {
	
    /**
     * Inserts a vehicle instance into a timestampedobject. 
     */
	public static final Function MAP_TO_TEMPORAL_OBJECT = new Function() {
        protected Vehicle v;
        
        public Object invoke(Object o) {
            v = (Vehicle)o;
            return new TemporalObject(v, new TimeInterval(v.getTimeStamp(), TimeInterval.INFINITY));
        }
    };
    
	/**
	 * a timestamp, the time is measured in ms after January 1, 1970, 00:00:00 GMT.
	 */
	protected long timeStamp;
	
	/**
	 * the distance from the sensor to the city marina.
	 */
	protected int distanceToCity;
	
	/**
	 * the lane of the sensor (usually between 1 and 5).
	 */
	protected byte lane; 
	
	/**
	 * the speed of the vehicle.
	 */
	protected double speed;
	
	/**
	 * the length of the vehicle.
	 */
	protected double length;
	
	/**
	 * the direction of the highway usually n or s (where n stands for north and s for south).
	 */
	protected char direction;
	
	/**
	 * Constructs a new vehicle instance.
	 * @param timeStamp the timstamp, when the behicle passed a sensor.
	 * @param distanceToCity the distance to the city oakland or marina.
	 * @param lane the lane number.
	 * @param speed the speed of the vehicle.
	 * @param length the length of the vehicle.
	 * @param direction the direction ('N' or 'S').
	 */public Vehicle(long timeStamp, int distanceToCity, byte lane, double speed, double length, char direction) {
		this.timeStamp = timeStamp;
		this.distanceToCity = distanceToCity;
		this.lane = lane;
		this.speed = speed;
		this.length = length;
		this.direction = direction;		
	}
	
	
	
	/**
	 * Return a string presentation of this class.
	 * @return a string presentation of this class.
	 */
	public String toString() {
		return "(time: "+new Date(timeStamp)+"; distance: "+distanceToCity+"; lane: "+lane+"; speed: "+
			+speed+"; length: "+length+"; direction: "+direction+")";
	}
	
	/**
	 * Contains a small test. 
	 * @param args
	 */
	public static void main(String[] args) {
		Vehicle v = new Vehicle(12124711, 12345, (byte)2, 123.67, 5.45, 'n' );
		System.out.println(v);
	}


	/**
	 * @return Returns the direction.
	 */
	public char getDirection() {
		return direction;
	}
	/**
	 * @param direction The direction to set.
	 */
	public void setDirection(char direction) {
		this.direction = direction;
	}
	/**
	 * @return Returns the distanceToCity.
	 */
	public int getDistanceToCity() {
		return distanceToCity;
	}
	/**
	 * @param distanceToCity The distanceToCity to set.
	 */
	public void setDistanceToCity(int distanceToCity) {
		this.distanceToCity = distanceToCity;
	}
	/**
	 * @return Returns the lane.
	 */
	public byte getLane() {
		return lane;
	}
	/**
	 * @param lane The lane to set.
	 */
	public void setLane(byte lane) {
		this.lane = lane;
	}
	/**
	 * @return Returns the length.
	 */
	public double getLength() {
		return length;
	}
	/**
	 * @param length The length to set.
	 */
	public void setLength(double length) {
		this.length = length;
	}
	/**
	 * @return Returns the speed.
	 */
	public double getSpeed() {
		return speed;
	}
	/**
	 * @param speed The speed to set.
	 */
	public void setSpeed(double speed) {
		this.speed = speed;
	}
	/**
	 * @return Returns the timeStamp.
	 */
	public long getTimeStamp() {
		return timeStamp;
	}
	/**
	 * @param timeStamp The timeStamp to set.
	 */
	public void setTimeStamp(long timeStamp) {
		this.timeStamp = timeStamp;
	}
}
